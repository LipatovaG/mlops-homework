import requests
import time
import json
from datetime import datetime
import yaml
import os


class ServiceMonitor:
    def __init__(self, config_path="config/monitoring_config.yaml"):
        self.load_config(config_path)
        self.consecutive_failures = 0
        self.metrics_history = []

    def load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        with open(config_path, 'r') as f:
            self.config = yaml.safe_load(f)

        self.base_url = self.config['service']['base_url']
        self.timeout = self.config['monitoring']['request_timeout_seconds']
        self.check_interval = self.config['monitoring']['check_interval_seconds']

    def get_color_status(self, response_time, status_code, endpoint="/health"):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤"""
        if endpoint == "/health":
            warning_threshold = self.config['thresholds']['response_time_ms']['warning']
            critical_threshold = self.config['thresholds']['response_time_ms']['critical']
        else:
            warning_threshold = self.config['thresholds']['p95_latency_ms']['warning']
            critical_threshold = self.config['thresholds']['p95_latency_ms']['critical']

        if status_code != 200:
            return "üî¥ –ö–†–ê–°–ù–´–ô"
        elif response_time < warning_threshold:
            return "üü¢ –ó–ï–õ–ï–ù–´–ô"
        elif response_time < critical_threshold:
            return "üü° –ñ–ï–õ–¢–´–ô"
        else:
            return "üî¥ –ö–†–ê–°–ù–´–ô"

    def check_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            start_time = time.time()
            response = requests.get(f"{self.base_url}/health", timeout=self.timeout)
            response_time = (time.time() - start_time) * 1000

            result = {
                "timestamp": datetime.now().isoformat(),
                "endpoint": "/health",
                "status_code": response.status_code,
                "response_time_ms": round(response_time, 2),
                "success": response.status_code == 200
            }

            # –°—á—ë—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if response.status_code == 200:
                self.consecutive_failures = 0
            else:
                self.consecutive_failures += 1

            status_color = self.get_color_status(response_time, response.status_code, "/health")
            print(
                f"{status_color} HEALTH: {response.status_code} | {response_time:.2f}ms | Failures: {self.consecutive_failures}")

            return result

        except Exception as e:
            self.consecutive_failures += 1
            error_result = {
                "timestamp": datetime.now().isoformat(),
                "endpoint": "/health",
                "error": str(e),
                "success": False
            }
            status_color = "üî¥ –ö–†–ê–°–ù–´–ô"
            print(f"{status_color} HEALTH ERROR: {e} | Failures: {self.consecutive_failures}")
            return error_result

    def check_predict(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /predict"""
        try:
            # POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /predict
            start_time = time.time()
            response = requests.post(
                f"{self.base_url}/predict",
                timeout=self.timeout,
                files={"file": ("test.jpg", b"fake_image_data", "image/jpeg")}
            )
            response_time = (time.time() - start_time) * 1000

            result = {
                "timestamp": datetime.now().isoformat(),
                "endpoint": "/predict",
                "status_code": response.status_code,
                "response_time_ms": round(response_time, 2),
                "success": response.status_code == 200
            }

            status_color = self.get_color_status(response_time, response.status_code, "/predict")
            print(f"{status_color} PREDICT: {response.status_code} | {response_time:.2f}ms")

            return result

        except Exception as e:
            error_result = {
                "timestamp": datetime.now().isoformat(),
                "endpoint": "/predict",
                "error": str(e),
                "success": False
            }
            status_color = "üî¥ –ö–†–ê–°–ù–´–ô"
            print(f"{status_color} PREDICT ERROR: {e}")
            return error_result

    def run_continuous_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞...")
        print(f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å: {self.base_url}")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")

        try:
            while True:
                print(f"\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {datetime.now().strftime('%H:%M:%S')} ---")
                health_result = self.check_health()
                predict_result = self.check_predict()

                # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ P95 —Ä–∞—Å—á—ë—Ç–∞
                self.metrics_history.append({
                    "health": health_result,
                    "predict": predict_result
                })

                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                if len(self.metrics_history) > 100:
                    self.metrics_history.pop(0)

                time.sleep(self.check_interval)

        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    monitor = ServiceMonitor()
    monitor.run_continuous_monitoring()
